const players = [
    { id: 1, x: 4, y: 5, width: 30, height: 30, color: "blue", speed: 5, bulletSpeed: 10, bullets: [] },
    { id: 2, x: 695, y: 465, width: 30, height: 30, color: "red", speed: 5, bulletSpeed: 10, bullets: [] },
];

function saveToFirebase(player) {
    return new Promise((resolve, reject) => {
        var playerRef = database.ref("players/" + player.id);

        playerRef.set({ x: player.x, y: player.y }, (error) => {
            if (error) {
                reject(error);
            } else {
                resolve(`Player ${player.id} data saved to Firebase successfully!`);
            }
        });
    });
}

function save() {
    const savePromises = players.map(player => saveToFirebase(player));
    Promise.all(savePromises)
        .then(results => {
            console.log(results.join('\n'));
        })
        .catch(error => {
            console.error("Error saving player data:", error);
        });
}

function get(playerId, callback) {
    var playerRef = database.ref("players/" + playerId);

    playerRef.on("value", function (snapshot) {
        var playerData = snapshot.val();
        console.log(`Player ${playerId}'s coordinates:`, playerData.x, playerData.y);

        if (typeof callback === "function") {
            callback(playerData);
        }
    });
}

// Call the get function for both players
get(1, movePlayer1); // Call movePlayer1 for Player 1 (ID: 1)
get(2, movePlayer2); // Call movePlayer2 for Player 2 (ID: 2)

function movePlayer1(player2Data) {
    players[0].x = player2Data.x;
    players[0].y = player2Data.y;

    console.log("Player 1's coordinates updated:", players[0].x, players[0].y);
    // Your movePlayer1 logic goes here for Player 1
}

function movePlayer2(player1Data) {
    players[1].x = player1Data.x;
    players[1].y = player1Data.y;

    console.log("Player 2's coordinates updated:", players[1].x, players[1].y);
    // Your movePlayer2 logic goes here for Player 2
}
